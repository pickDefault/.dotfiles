// Place your key bindings in this file to override the defaults
[
    {
        "key": "ctrl+`",
        "command": "workbench.action.createTerminalEditor"
    },
    {
        "key": "alt+cmd+right",
        "command": "-workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+cmd+left",
        "command": "-workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "cmd+`",
        "command": "workbench.action.quickSwitchWindow"
    },
    {
        "key": "ctrl+shift+`",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "ctrl+`",
        "command": "-workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "ctrl+shift+`",
        "command": "-workbench.action.terminal.new",
        "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
    },
    {
        "key": "cmd+0",
        "command": "workbench.action.lastEditorInGroup"
    },
    {
        "key": "cmd+1",
        "command": "workbench.action.openEditorAtIndex1"
    },
    {
        "key": "cmd+2",
        "command": "workbench.action.openEditorAtIndex2"
    },
    {
        "key": "cmd+3",
        "command": "workbench.action.openEditorAtIndex3"
    },
    {
        "key": "cmd+4",
        "command": "workbench.action.openEditorAtIndex4"
    },
    {
        "key": "cmd+5",
        "command": "workbench.action.openEditorAtIndex5"
    },
    {
        "key": "cmd+6",
        "command": "workbench.action.openEditorAtIndex6"
    },
    {
        "key": "cmd+7",
        "command": "workbench.action.openEditorAtIndex7"
    },
    {
        "key": "cmd+8",
        "command": "workbench.action.openEditorAtIndex8"
    },
    {
        "key": "cmd+9",
        "command": "workbench.action.openEditorAtIndex9"
    },
    {
        "key": "ctrl+1",
        "command": "workbench.action.focusFirstEditorGroup"
    },
    {
        "key": "ctrl+2",
        "command": "workbench.action.focusSecondEditorGroup"
    },
    {
        "key": "ctrl+3",
        "command": "workbench.action.focusThirdEditorGroup"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "alt+cmd+right",
        "command": "-workbench.action.nextEditor"
    },
    {
        "key": "ctrl+h",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "alt+cmd+left",
        "command": "-workbench.action.previousEditor"
    },
    {
        "key": "cmd+9",
        "command": "-workbench.action.lastEditorInGroup"
    },
    {
        "key": "ctrl+g d",
        "command": "editor.action.revealDefinition",
        "when": "editorTextFocus && neovim.mode == 'normal'"
    },
    // Scroll through suggestions with tab instead of selecting with tab
    {
        "key": "tab",
        "command": "selectNextQuickFix",
        "when": "editorFocus && quickFixWidgetVisible"
    },
    {
        "key": "shift+tab",
        "command": "selectPrevQuickFix",
        "when": "editorFocus && quickFixWidgetVisible"
    },
    {
        "key": "tab",
        "command": "selectNextSuggestion",
        "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
    },
    {
        "key": "shift+tab",
        "command": "selectPrevSuggestion",
        "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
    },
    {
        "key": "ctrl+cmd+right",
        "command": "-workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "ctrl+cmd+left",
        "command": "-workbench.action.moveEditorToPreviousGroup"
    },
    // Resize split editors
    {
        "key": "ctrl+=",
        "command": "workbench.action.increaseViewSize"
    },
    {
        "key": "ctrl+-",
        "command": "workbench.action.decreaseViewSize"
    },
    // Mnemonical shortcuts to working with split windows
    {
        "key": "ctrl+s d j",
        "command": "workbench.action.splitEditorDown"
    },
    {
        "key": "ctrl+s d k",
        "command": "workbench.action.splitEditorUp"
    },
    {
        "key": "ctrl+s d l",
        "command": "workbench.action.splitEditorRight"
    },
    {
        "key": "ctrl+s d h",
        "command": "workbench.action.splitEditorLeft"
    },
    {
        "key": "ctrl+s m j",
        "command": "workbench.action.moveEditorToBelowGroup"
    },
    {
        "key": "ctrl+s m k",
        "command": "workbench.action.moveEditorToAboveGroup"
    },
    {
        "key": "ctrl+s m l",
        "command": "workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "ctrl+s m h",
        "command": "workbench.action.moveEditorToPreviousGroup"
    },
    {
        "key": "ctrl+s j",
        "command": "workbench.action.toggleSplitEditorInGroup",
        "when": "activeEditorCanSplitInGroup || activeEditorCanRevert",
    },
    {
        "key": "ctrl+s shift+j",
        "command": "workbench.action.toggleSplitEditorInGroupLayout",
    },
    {
        "key": "shift+cmd+d",
        "command": "-workbench.view.debug",
        "when": "viewContainer.workbench.view.debug.enabled"
    },
    {
        "key": "shift+cmd+d",
        "command": "editor.action.addSelectionToPreviousFindMatch"
    },
    {
        "key": "ctrl+w k",
        "command": "workbench.action.navigateUp",
        "when": "neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+w k",
        "command": "-workbench.action.navigateUp",
        "when": "!editorTextFocus && !terminalFocus"
    },
    {
        "key": "ctrl+w j",
        "command": "workbench.action.navigateDown",
        "when": "neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+w j",
        "command": "-workbench.action.navigateDown",
        "when": "!editorTextFocus && !terminalFocus"
    },
    {
        "key": "ctrl+w h",
        "command": "workbench.action.navigateLeft",
        "when": "neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+w h",
        "command": "-workbench.action.navigateLeft",
        "when": "!editorTextFocus && !terminalFocus"
    },
    {
        "key": "ctrl+w l",
        "command": "workbench.action.navigateRight",
        "when": "neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+w l",
        "command": "-workbench.action.navigateRight",
        "when": "!editorTextFocus && !terminalFocus"
    },
    {
        "key": "ctrl+w z",
        "command": "workbench.action.toggleMaximizeEditorGroup",
        "when": "maximizedEditorGroup || multipleEditorGroups && neovim.mode != 'insert'"
    },
    {
        "key": "cmd+k cmd+m",
        "command": "-workbench.action.toggleMaximizeEditorGroup",
        "when": "maximizedEditorGroup || multipleEditorGroups"
    },
    {
        "key": "shift+space r f",
        "command": "editor.action.refactor",
        "when": "editorTextFocus && neovim.mode == 'normal'"
    },
    {
        "key": "shift+space r s",
        "command": "editor.action.rename",
        "when": "editorTextFocus && neovim.mode == 'normal'"
    },
    {
        "key": "cmd+k shift+cmd+\\",
        "command": "-workbench.action.joinEditorInGroup",
        "when": "sideBySideEditorActive"
    },
    {
        "key": "cmd+k",
        "command": "-workbench.action.terminal.clear"
    },
    {
        "key": "ctrl+o",
        "command": "-vscode-neovim.escape",
        "when": "editorTextFocus && neovim.ctrlKeysInsert && neovim.mode == 'insert'"
    },
    {
        "key": "ctrl+o",
        "command": "vscode-neovim.escape",
        "when": "editorTextFocus",
        "args": "<C-o>"
    },
    {
        "key": "alt+l",
        "command": "editor.action.wordHighlight.next",
        "when": "editorTextFocus"
    },
    {
        "key": "f7",
        "command": "-editor.action.wordHighlight.next",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "alt+h",
        "command": "editor.action.wordHighlight.prev",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+f7",
        "command": "-editor.action.wordHighlight.prev",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "alt+h",
        "command": "-testing.toggleTestingPeekHistory",
        "when": "testing.isPeekVisible"
    },
    {
        "key": "cmd+/",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly && neovim.mode != 'cmdline'"
    },
    {
        "key": "cmd+/",
        "command": "-editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+r",
        "command": "workbench.action.openRecent"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
    },
    {
        "key": "shift+cmd+r",
        "command": "workbench.action.terminal.goToRecentDirectory",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "cmd+g",
        "command": "-workbench.action.terminal.goToRecentDirectory",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "cmd+/",
        "command": "editor.action.blockComment",
        "when": "editorHasSelection && editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+a",
        "command": "-editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+k cmd+i",
        "command": "-editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "ctrl+g i",
        "command": "editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor && neovim.mode == 'normal'"
    },
    {
        "key": "cmd+f12",
        "command": "-editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+g r",
        "command": "editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor && neovim.mode == 'normal'"
    },
    {
        "key": "shift+f12",
        "command": "-editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+g s",
        "command": "workbench.action.gotoSymbol",
        "when": "editorTextFocus && !accessibilityHelpIsShown && !accessibleViewIsShown && neovim.mode == 'normal'"
    },
    {
        "key": "shift+cmd+o",
        "command": "-workbench.action.gotoSymbol",
        "when": "!accessibilityHelpIsShown && !accessibleViewIsShown"
    },
    {
        "key": "ctrl+g shift+s",
        "command": "workbench.action.showAllSymbols",
        "when": "editorTextFocus && neovim.mode == 'normal'"
    },
    {
        "key": "cmd+t",
        "command": "-workbench.action.showAllSymbols"
    },
    {
        "key": "g g",
        "command": "-list.focusFirst",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+g h",
        "command": "editor.action.showHover",
        "when": "editorTextFocus && neovim.mode == 'normal'"
    },
    {
        "key": "cmd+k cmd+i",
        "command": "-editor.action.showHover",
        "when": "editorTextFocus"
    },
    /* {
        "key": "g g",
        "command": "vscode-neovim.send",
        "when": "editorTextFocus && neovim.mode == 'normal'",
        "args": "gg"
    }, */
    {
        "key": "ctrl+g e",
        "command": "vscode-neovim.send",
        "when": "editorTextFocus && neovim.mode == 'normal'",
        "args": "ge"
    },
    {
        "key": "ctrl+g shift+e",
        "command": "vscode-neovim.send",
        "when": "editorTextFocus && neovim.mode == 'normal'",
        "args": "gE"
    },
    /* {
        "key": "ctrl+w",
        "command": "",
        "when": ""
    } */
]